// <auto-generated />
using System;
using Criistal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Criistal.Migrations
{
    [DbContext(typeof(CriistalContext))]
    [Migration("20191216002945_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Criistal.Models.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("PhoneCode");

                    b.HasKey("ID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Criistal.Models.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Criistal.Models.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Criistal.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("BIC");

                    b.Property<string>("City");

                    b.Property<int?>("CountryID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Domiciliation");

                    b.Property<string>("Email");

                    b.Property<string>("FirstAdress");

                    b.Property<string>("FirstName");

                    b.Property<string>("Function");

                    b.Property<int>("Gender");

                    b.Property<string>("IBAN");

                    b.Property<string>("LastName");

                    b.Property<int>("Mobile");

                    b.Property<string>("Password");

                    b.Property<string>("PayPal");

                    b.Property<int>("PaymentMethod");

                    b.Property<int>("Phone");

                    b.Property<string>("RIB");

                    b.Property<string>("SecondAdress");

                    b.Property<int>("State");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("UpdatedBy");

                    b.Property<bool>("ValidateYN");

                    b.Property<int>("ZipCode");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Criistal.Models.UserPermission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("PermissionID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("PermissionID");

                    b.HasIndex("UserID");

                    b.ToTable("UserPermission");
                });

            modelBuilder.Entity("Criistal.Models.UserRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Criistal.Models.User", b =>
                {
                    b.HasOne("Criistal.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");
                });

            modelBuilder.Entity("Criistal.Models.UserPermission", b =>
                {
                    b.HasOne("Criistal.Models.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Criistal.Models.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Criistal.Models.UserRole", b =>
                {
                    b.HasOne("Criistal.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Criistal.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
